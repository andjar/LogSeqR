pages <- json_pages_to_tiddler(df_raw)
View(pages)
View(k)
k$children
View(k)
data <- k
length(data$children)
tid_collapse <- function(strlist) {
paste0(
"[[",
paste0(strlist, collapse = "]] [["),
"]]"
)
}
data <- k$children[[1]]
View(data)
json_block_to_tiddler <- function(data, page_id, block_id = NA) {
if ( length(data$children) > 0 ) {
df_out <- rbindlist(lapply(data$children, function(k) {
json_block_to_tiddler(k, page_id = page_id, block_id = data$id)
}))
} else {
data.table(
page_id = page_id,
parent_id = block_id,
block_id = data$id,
content = data$content
)
}
}
json_block_to_tiddler(k, page_id = "")
m <- json_block_to_tiddler(k, page_id = "")
View(m)
json_block_to_tiddler <- function(data, page_id, block_id = NA) {
if ( length(data$children) > 0 ) {
df_out <- rbindlist(lapply(data$children, function(k) {
json_block_to_tiddler(k, page_id = page_id, block_id = data$id)
}), fill = TRUE)
} else {
data.table(
page_id = page_id,
parent_id = block_id,
block_id = data$id,
content = data$content,
as.data.table(data$properties)
)
}
}
m <- json_block_to_tiddler(k, page_id = "")
View(m)
json_blocks_to_tiddler <- function(data) {
return(
rbindlist(lapply(data, function(data_item) {
json_block_to_tiddler(data_item[["children"]], page_id = data_item[["page-id"]])
}), fill = TRUE)
)
}
blocks <- json_blocks_to_tiddler(df_raw)
json_page_to_tiddler <- function(data) {
df_out <- data.table(
id = data[["id"]],
page_name = data[["page-name"]]
)
if (!is.null(data[["properties"]])) {
df_out <- cbind(
df_out,
as.data.table(data$properties)
)
}
return(df_out)
}
json_pages_to_tiddler <- function(data) {
return(
rbindlist(lapply(data, function(data_item) {
json_page_to_tiddler(data_item)
}), fill = TRUE)
)
}
json_block_to_tiddler <- function(data, page_id, block_id = NA) {
if ( length(data$children) > 0 ) {
df_out <- rbindlist(lapply(data$children, function(k) {
json_block_to_tiddler(k, page_id = page_id, block_id = data$id)
}), fill = TRUE)
} else {
data.table(
page_id = page_id,
parent_id = block_id,
block_id = data$id,
content = data$content,
as.data.table(data$properties)
)
}
}
json_blocks_to_tiddler <- function(data) {
return(
rbindlist(lapply(data, function(data_item) {
json_block_to_tiddler(data_item[["children"]], page_id = data_item[["page-id"]])
}), fill = TRUE)
)
}
tid_collapse <- function(strlist) {
paste0(
"[[",
paste0(strlist, collapse = "]] [["),
"]]"
)
}
pages  <- json_pages_to_tiddler(df_raw)
blocks <- json_blocks_to_tiddler(df_raw)
data_item <- data[[1]]
data_item <- df_raw[[1]]
json_blocks_to_tiddler <- function(data) {
return(
rbindlist(lapply(data, function(data_item) {
json_block_to_tiddler(data_item, page_id = data_item[["page-id"]])
}), fill = TRUE)
)
}
blocks <- json_blocks_to_tiddler(df_raw)
View(blocks)
data_item[["page-id"]]
json_page_to_tiddler <- function(data) {
df_out <- data.table(
id = data[["id"]],
page_name = data[["page-name"]]
)
if (!is.null(data[["properties"]])) {
df_out <- cbind(
df_out,
as.data.table(data$properties)
)
}
return(df_out)
}
json_pages_to_tiddler <- function(data) {
return(
rbindlist(lapply(data, function(data_item) {
json_page_to_tiddler(data_item)
}), fill = TRUE)
)
}
json_block_to_tiddler <- function(data, page_id, block_id = NA) {
if ( length(data$children) > 0 ) {
df_out <- rbindlist(lapply(data$children, function(k) {
json_block_to_tiddler(k, page_id = page_id, block_id = data$id)
}), fill = TRUE)
} else {
data.table(
page_id = page_id,
parent_id = block_id,
block_id = data$id,
content = data$content,
as.data.table(data$properties)
)
}
}
json_blocks_to_tiddler <- function(data) {
return(
rbindlist(lapply(data, function(data_item) {
json_block_to_tiddler(data_item, page_id = data_item[["id"]])
}), fill = TRUE)
)
}
tid_collapse <- function(strlist) {
paste0(
"[[",
paste0(strlist, collapse = "]] [["),
"]]"
)
}
df_raw <- jsonlite::read_json("test.json")$blocks
pages  <- json_pages_to_tiddler(df_raw)
blocks <- json_blocks_to_tiddler(df_raw)
source("C:/Users/anderhja/Lokal_folder/LogSeqR/R/utils.R")
df_raw <- jsonlite::read_json("test.json")$blocks
pages  <- json_pages_to_tiddler(df_raw)
blocks <- json_blocks_to_tiddler(df_raw)
View(blocks)
source("C:/Users/anderhja/Lokal_folder/LogSeqR/R/utils.R")
df_raw <- jsonlite::read_json("test.json")$blocks
pages  <- json_pages_to_tiddler(df_raw)
blocks <- json_blocks_to_tiddler(df_raw)
View(blocks)
json_page_to_tiddler <- function(data) {
df_out <- data.table(
id = data[["id"]],
page_name = data[["page-name"]]
)
if (!is.null(data[["properties"]])) {
df_out <- cbind(
df_out,
as.data.table(data$properties)
)
}
return(df_out)
}
json_pages_to_tiddler <- function(data) {
return(
rbindlist(lapply(data, function(data_item) {
json_page_to_tiddler(data_item)
}), fill = TRUE)
)
}
json_block_to_tiddler <- function(data, page_id, block_id = NA, ancestors = NA) {
if ( length(data$children) > 0 ) {
df_out <- rbindlist(lapply(data$children, function(k) {
json_block_to_tiddler(k, page_id = page_id, block_id = data$id, ancestors = c(ancestors, data$id))
}), fill = TRUE)
} else {
data.table(
page_id = page_id,
parent_id = block_id,
block_id = data$id,
content = data$content,
ancestors = tid_collapse(ancestors),
as.data.table(data$properties)
)
}
}
json_blocks_to_tiddler <- function(data) {
return(
rbindlist(lapply(data, function(data_item) {
json_block_to_tiddler(data_item, page_id = data_item[["id"]])
}), fill = TRUE)
)
}
tid_collapse <- function(strlist) {
strlist <- strlist[!is.na(strlist)]
paste0(
"[[",
paste0(strlist, collapse = "]] [["),
"]]"
)
}
blocks <- json_blocks_to_tiddler(df_raw)
View(blocks)
pages
blocks
df
blocks$content
# This function will import tiddlers saved in a json (only MD format)
import_from_json <- function(file_name) {
df_raw <- jsonlite::read_json(file_name)$blocks
return(
list(
pages  = json_pages_to_tiddler(df_raw),
blocks = json_blocks_to_tiddler(df_raw)
)
)
}
k <- import_from_json("test.json")
# This function will import tiddlers saved in a json (only MD format)
import_from_json <- function(file_name) {
df_raw <- jsonlite::read_json(file_name)$blocks
return(
list(
pages  = json_pages_to_tiddler(df_raw),
blocks = json_blocks_to_tiddler(df_raw)
)
)
}
k <- import_from_json("test.json")
source("C:/Users/anderhja/Lokal_folder/LogSeqR/R/utils.R")
k <- import_from_json("test.json")
View(k)
data <- k
blocks <- data$blocks
View(blocks)
i <- 7
i <- 7L
grepl("#", blocks[i, content], fixed = TRUE)
blocks[i, tags]
View(blocks)
tags <- unlist(regmatches(string, gregexpr("#\\w+", blocks[i, content])))
tags <- unlist(regmatches(blocks[i, content], gregexpr("#\\w+", blocks[i, content])))
is.null(blocks$tags)
extract_tags <- function(blocks) {
for (i in seq_len(nrow(blocks))) {
if (grepl("#", blocks[i, content], fixed = TRUE)) {
tags <- unlist(regmatches(blocks[i, content], gregexpr("#\\w+", blocks[i, content])))
tags <- gsub("#", "", tags, fixed = TRUE)
tags <- tid_collapse(tags)
if (!is.null(blocks$tags)) {
tags <- c(tags, blocks[i, tags])
}
set(blocks, i = i, j = "tags", value = tags)
}
}
}
blocks <- extract_tags(blocks)
extract_tags <- function(blocks) {
for (i in seq_len(nrow(blocks))) {
if (grepl("#", blocks[i, content], fixed = TRUE)) {
tags <- unlist(regmatches(blocks[i, content], gregexpr("#\\w+", blocks[i, content])))
tags <- gsub("#", "", tags, fixed = TRUE)
tags <- tid_collapse(tags)
if (!is.null(blocks$tags)) {
tags <- paste(tags, blocks[i, tags])
}
set(blocks, i = i, j = "tags", value = tags)
}
}
}
blocks <- extract_tags(blocks)
k <- import_from_json("test.json")
blocks <- k$blocks
i <- 7
grepl("#", blocks[i, content], fixed = TRUE)
tags <- unlist(regmatches(blocks[i, content], gregexpr("#\\w+", blocks[i, content])))
tags <- gsub("#", "", tags, fixed = TRUE)
tags <- tid_collapse(tags)
is.null(blocks$tags)
set(blocks, i = i, j = "tags", value = tags)
View(blocks)
extract_tags <- function(blocks) {
for (i in seq_len(nrow(blocks))) {
if (grepl("#", blocks[i, content], fixed = TRUE)) {
tags <- unlist(regmatches(blocks[i, content], gregexpr("#\\w+", blocks[i, content])))
tags <- gsub("#", "", tags, fixed = TRUE)
tags <- tid_collapse(tags)
if (!is.null(blocks$tags)) {
tags <- paste(tags, blocks[i, tags])
}
set(blocks, i = i, j = "tags", value = tags)
}
}
}
blocks <- extract_tags(blocks)
extract_tags <- function(blocks) {
for (i in seq_len(nrow(blocks))) {
if (grepl("#", blocks[i, content], fixed = TRUE)) {
tags <- unlist(regmatches(blocks[i, content], gregexpr("#\\w+", blocks[i, content])))
tags <- gsub("#", "", tags, fixed = TRUE)
tags <- tid_collapse(tags)
if (!is.null(blocks$tags)) {
tags <- paste(tags, blocks[i, tags])
}
set(blocks, i = i, j = "tags", value = tags)
}
}
invisible(blocks)
}
k <- import_from_json("test.json")
blocks <- k$blocks
extract_tags <- function(blocks) {
for (i in seq_len(nrow(blocks))) {
if (grepl("#", blocks[i, content], fixed = TRUE)) {
tags <- unlist(regmatches(blocks[i, content], gregexpr("#\\w+", blocks[i, content])))
tags <- gsub("#", "", tags, fixed = TRUE)
tags <- tid_collapse(tags)
if (!is.null(blocks$tags)) {
tags <- paste(tags, blocks[i, tags])
}
set(blocks, i = i, j = "tags", value = tags)
}
}
invisible(blocks)
}
blocks <- extract_tags(blocks)
View(blocks)
source("C:/Users/anderhja/Lokal_folder/LogSeqR/R/utils.R")
source("C:/Users/anderhja/Lokal_folder/LogSeqR/R/imports.R")
k <- import_from_json("test.json")
blocks <- k$blocks
blocks <- extract_tags(blocks)
source("C:/Users/anderhja/Lokal_folder/LogSeqR/R/utils.R")
blocks <- extract_tags(blocks)
View(blocks)
View(blocks)
i <- 8
any(grepl(keywords_of_interest, blocks[i, content], fixed = TRUE))
keywords_of_interest = c("TODO", "DONE", "CANCELLED", "CANCELED")
any(grepl(keywords_of_interest, blocks[i, content], fixed = TRUE))
keywords_of_interest_collapsed <- paste0(keywords_of_interest, collapse = "|")
grepl(keywords_of_interest_collapsed, blocks[i, content])
keywords_of_interest %in% blocks[i, content]
keywords_of_interest[grep(paste(keywords_of_interest, collapse = "|"), blocks[i, content])]
tags <- tid_collapse(keywords_of_interest[grep(paste(keywords_of_interest, collapse = "|"), blocks[i, content])])
if (!is.null(blocks$tags)) {
if (!is.na(blocks[i, tags])) {
tags <- paste(tags, blocks[i, tags])
}
}
source("C:/Users/anderhja/Lokal_folder/LogSeqR/R/utils.R")
source("C:/Users/anderhja/Lokal_folder/LogSeqR/R/imports.R")
k <- import_from_json("test.json")
k$blocks <- extract_tags(k$blocks)
k$blocks <- extract_keywords(k$blocks)
source("C:/Users/anderhja/Lokal_folder/LogSeqR/R/utils.R")
k <- import_from_json("test.json")
blocks <- k$blocks
blocks <- extract_tags(blocks)
k$blocks <- extract_tags(k$blocks)
k$blocks <- extract_keywords(k$blocks)
k$blocks
set(blocks, i = i, j = "content", value = gsub(keywords_of_interest_collapsed, "", blocks[i, content]))
i <- 8
source("C:/Users/anderhja/Lokal_folder/LogSeqR/R/utils.R")
source("C:/Users/anderhja/Lokal_folder/LogSeqR/R/imports.R")
source("C:/Users/anderhja/Lokal_folder/LogSeqR/R/utils.R")
k <- import_from_json("test.json")
blocks <- k$blocks
blocks <- extract_tags(blocks)
blocks <- extract_keywords(blocks)
View(blocks)
source("C:/Users/anderhja/Lokal_folder/LogSeqR/R/utils.R")
k <- import_from_json("test.json")
blocks <- k$blocks
blocks <- extract_tags(blocks)
blocks <- extract_keywords(blocks)
View(blocks)
transform_links <- function(blocks, pages) {
for (i in 1:nrow(pages)) {
old_link <- paste0("[[", pages$page_name[i], "]]")
new_link <- paste0("[[", pages$page_name[i], "|", pages$id[i], "]]")
blocks[, content := gsub(old_link, new_link, content)]
}
invisible(blocks)
}
blocks <- transform_links(blocks, k$pages)
transform_links <- function(blocks, pages) {
for (i in 1:nrow(pages)) {
old_link <- paste0("[[", pages$page_name[i], "]]")
new_link <- paste0("[[", pages$page_name[i], "|", pages$id[i], "]]")
blocks[, content := gsub(old_link, new_link, content, fixed = TRUE)]
}
invisible(blocks)
}
blocks <- transform_links(blocks, k$pages)
View(blocks)
blocks[6, content]
k$blocks
source("C:/Users/anderhja/Lokal_folder/LogSeqR/R/utils.R")
source("C:/Users/anderhja/Lokal_folder/LogSeqR/R/imports.R")
k <- import_from_json("test.json")
blocks <- k$blocks
blocks <- extract_tags(blocks)
blocks <- extract_keywords(blocks)
blocks[6, content]
blocks <- transform_links(blocks, k$pages)
blocks[6, content]
source("C:/Users/anderhja/Lokal_folder/LogSeqR/R/utils.R")
source("C:/Users/anderhja/Lokal_folder/LogSeqR/R/imports.R")
k <- import_from_json("test.json")
blocks <- k$blocks
blocks <- extract_tags(blocks)
blocks <- extract_task_keywords(blocks)
blocks <- transform_links(blocks, k$pages)
View(blocks)
k$pages
data <- k
pages <- data$pages
pages[, lq_type := "page"]
colnames(pages)[colnames(pages) == "title"] <- "lq-title"
colnames(pages)[colnames(pages) == "page_name"] <- "caption"
colnames(pages)[colnames(pages) == "id"] <- "title"
pages
blocks <- data$blocks
blocks[, lq_type := "block"]
?jsonlite::write_json()
source("C:/Users/anderhja/Lokal_folder/LogSeqR/R/utils.R")
source("C:/Users/anderhja/Lokal_folder/LogSeqR/R/exports.R")
source("C:/Users/anderhja/Lokal_folder/LogSeqR/R/imports.R")
k <- import_from_json("test.json")
k <- process_raw_blocks(k)
source("C:/Users/anderhja/Lokal_folder/LogSeqR/R/imports.R")
k <- import_from_json("test.json")
k <- process_raw_blocks(k)
source("C:/Users/anderhja/Lokal_folder/LogSeqR/R/imports.R")
k <- import_from_json("test.json")
k <- process_raw_blocks(k)
export_to_json(k)
data <- k
pages <- data$pages
k <- import_from_json("test.json")
k <- process_raw_blocks(k)
source("C:/Users/anderhja/Lokal_folder/LogSeqR/R/imports.R")
k <- import_from_json("test.json")
k <- process_raw_blocks(k)
export_to_json(k)
data <- k
pages <- data$pages
pages[, `lq-type` := "page"]
colnames(pages)[colnames(pages) == "title"] <- "lq-title"
colnames(pages)[colnames(pages) == "page_name"] <- "caption"
colnames(pages)[colnames(pages) == "id"] <- "title"
blocks <- data$blocks
blocks[, `lq-type` := "block"]
colnames(blocks)[colnames(blocks) == "title"] <- "lq-title"
colnames(blocks)[colnames(blocks) == "lq_ancestors"] <- "lq-ancestors"
colnames(blocks)[colnames(blocks) == "lq_task"] <- "lq-task"
colnames(blocks)[colnames(blocks) == "lq_keywords"] <- "lq-keywords"
colnames(blocks)[colnames(blocks) == "id"] <- "title"
rbind(pages,blocks, fill = TRUE)
kk <- rbind(pages,blocks, fill = TRUE)
View(kk)
source("C:/Users/anderhja/Lokal_folder/LogSeqR/R/exports.R")
source("C:/Users/anderhja/Lokal_folder/LogSeqR/R/utils.R")
source("C:/Users/anderhja/Lokal_folder/LogSeqR/R/imports.R")
k <- import_from_json("test.json")
k <- process_raw_blocks(k)
export_to_json(k)
source("C:/Users/anderhja/Lokal_folder/LogSeqR/R/exports.R")
source("C:/Users/anderhja/Lokal_folder/LogSeqR/R/utils.R")
source("C:/Users/anderhja/Lokal_folder/LogSeqR/R/imports.R")
k <- import_from_json("test.json")
k <- process_raw_blocks(k)
export_to_json(k)
k$pages
usethis::use_readme_rmd()
devtools::document()
devtools::build()
